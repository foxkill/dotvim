" vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker:

"
" local settings Copyright (c) 2015 Stefan Martin
"

"
" color settings
"

"hi CursorLineNr term=bold ctermfg=Yellow gui=bold guifg=Yellow


set t_Co=256

" CSCOPE {{{

if has ("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " 1 = check ctags for definition of a symbol before checking cscope
    " 0 = reverse
    set csto=0

    " add any cscope database in current directory
    " note: this is better than the autoload_cscope plugin because it allows 'vim -t {tag}' from the command line
    if filereadable("cscope.out")
        cs add cscope.out
        " else search up a few directories
    elseif filereadable("../cscope.out")
        cs add ../cscope.out
    elseif filereadable("../../cscope.out")
        cs add ../../cscope.out
    elseif filereadable("../../../cscope.out")
        cs add ../../../cscope.out
    elseif filereadable("../../../../cscope.out")
        cs add ../../../../cscope.out
    elseif filereadable("../../../../../cscope.out")
        cs add ../../../../../cscope.out
    elseif filereadable("../../../../../../cscope.out")
        cs add ../../../../../../cscope.out
    elseif filereadable("../../../../../../../cscope.out")
        cs add ../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../cscope.out")
        cs add ../../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../../cscope.out")
        cs add ../../../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../../../cscope.out")
        cs add ../../../../../../../../../../cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " The following maps all invoke one of the following cscope search types:
    " (note: <C-@> = <C-Space> = Ctrl+Space
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
    nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
    nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Ctrl+space+space will open cscope results in vertically split window
    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif
" }}}

"
" plugin settings
"

 " COLORSCHEME:solarized {{{
"let g:solarized_termcolors=256
"colorscheme solarized
"set background=light
" }}}

" COLORSCHEME:smyck {{{
colorscheme smyck
" }}}

" AIRLINE PLUGIN {{{
"
" git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
"
let g:airline_powerline_fonts            = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_theme                      = 'badwolf'
let g:Powerline_symbols                  = 'fancy'
"let g:airline_left_sep                   = ''
"let g:airline_right_sep                  = ''
"let g:airline_section_z                  = ''
" }}}

" CTRLP PLUGIN {{{
" $ cd ~/.vim/bundle
" $ git clone https://github.com/kien/ctrlp.vim.git

let g:ctrlp_map           = '<c-p>'
let g:ctrlp_cmd           = 'CtrlPMRU'
let g:ctrlp_use_caching   = 1
let g:ctrlp_cache_dir     = $HOME . '/.cache/ctrlp'
let g:ctrlp_custom_ignore = 'tmp$\|\.git$\|\.hg$\|\.svn$\|.rvm$|.bundle$\|vendor|node_modules'
let g:ctrlp_by_mru        = 1

nnoremap <leader>ct :CtrlPBufTag<CR>

if executable('ag')
    "set grepprg=ag\ --nogroup \--nocolor
    "let g:ctrlp_user_command = 'ag --files-with-matches -g "" --ignore "\.git$|\.svn$" %s'
    "let g:ctrlp_use_caching = 0
endif
" }}}

" TAGBAR PLUGIN {{{
    " if has('tagbar')
    nnoremap <leader>tt :TagbarToggle<CR><C-w><C-l>
" endif
"}}}

" AG PLUGIN {{{
" https://github.com/rking/ag.vim.git bundle/ag
let g:ag_prg="ag --vimgrep --smart-case"
nnoremap <leader>a :Ag!<SPACE>
" }}}

" SYNTASTIC PLUGIN {{{
" git clone https://github.com/scrooloose/syntastic.git

let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_php_phpcs_args           = "--standard = Zend"
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list            = 0
let g:syntastic_check_on_open            = 0
let g:syntastic_check_on_wq              = 0
let g:syntastic_auto_jump                = 1
let g:syntastic_error_symbol             = "✗"
let g:syntastic_style_error_symbol       = "✗"
let g:syntastic_warning_symbol           = "⚠"
let g:syntastic_style_warning_symbol     = "⚠"
" }}}

" VIM-PHPFMT PLUGIN {{{
" git clone https://github.com/dericofilho/vim-phpfmt.git

let g:phpfmt_on_save = 0
let g:phpfmt_psr2=1
" disable it until it works correctly
let g:phpfmt_enable_default_mapping = 0
" }}}

" VIM-PHP-CS-FIXER PLUGIN {{{
" 
if !executable('~/php-cs-fixer')
    let g:php_cs_fixer_path = "~/.composer/vendor/bin/php-cs-fixer"
end

let g:php_cs_fixer_verbose = 1
" }}}

" NEO-COMPLETE PLUGIN {{{
"
let g:neocomplete#enable_at_startup = 1

" }}}

" SVNJ PLUGIN {{{
"
let g:svnj_allow_leader_mappings = 1

" }}}

" ULTISNIPS PLUGIN {{{

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"


" }}}


" delimitmate plugin {{{
"
let g:delimitMate_expand_cr = 2

" }}}

"hi CursorLineNR cterm=bold
"augroup CLNRSet
"    autocmd! ColorScheme * hi CursorLineNR cterm=bold
"augroup END


highlight ColorColumn ctermbg=LightBlue
"" execute set colorcolumn= . join(range(120,335), ',')
" call matchadd('ColorColumn', '\%81v', 100)
